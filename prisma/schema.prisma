datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

model User {
  id              Int      @id @default(autoincrement())
  nacionalidad    String
  cedula          Int      @unique
  password        String
  fullname        String
  birthdate       DateTime
  estadoId        Int
  municipioId     Int
  parroquiaId     Int
  question        String
  answer          String
  role            Int      @default(1) // 1 = votante, 2 = admin
  tokenRecovery   String   @default("")
  updatedAt       DateTime @updatedAt
  passwordUpdated DateTime @default(now())

  estado    Estado    @relation(fields: [estadoId], references: [id])
  municipio Municipio @relation(fields: [municipioId], references: [id])
  parroquia Parroquia @relation(fields: [parroquiaId], references: [id])
  votes     UserVote[]
  logs      Log[]
}

enum Active {
  active
  inactive
}

enum RoleElection {
  normal
  especial
}

model Election {
  id           Int          @id @default(autoincrement())
  title        String
  description  String?
  startDate    DateTime
  endDate      DateTime
  roleElection RoleElection @default(normal)
  type         typeElec     @default(pais)
  typeId       Int          @default(0)
  active       Active       @default(inactive)
  candidates   Candidate[]
  votes        Vote[]       @relation("votes_elec")
  userVotes    UserVote[]
}

enum typeElec {
  pais
  estado
  municipio
  parroquia
}

model Candidate {
  id         Int      @id @default(autoincrement())
  name       String
  image      String?  @default("")
  election   Election @relation(fields: [electionId], references: [id], onDelete: Cascade)
  electionId Int

  // Relaci贸n inversa con el modelo Vote
  votes Vote[] @relation("votes")
}

model Vote {
  id          Int      @id @default(autoincrement())
  candidateId Int? // ID del candidato seleccionado (opcional)
  electionId  Int // ID de la elecci贸n
  createdAt   DateTime @default(now()) // Fecha y hora en que se emiti贸 el voto

  // Relaciones
  candidate Candidate? @relation("votes", fields: [candidateId], references: [id]) // Relaci贸n opcional con el candidato
  election  Election   @relation("votes_elec", fields: [electionId], references: [id], onDelete: Cascade)
}

model UserVote {
  id         Int      @id @default(autoincrement())
  userCedula Int
  electionId Int
  createdAt  DateTime @default(now())

  // relaciones
  user     User     @relation(fields: [userCedula], references: [cedula])
  election Election @relation(fields: [electionId], references: [id])

}

model Estado {
  id         Int         @id @default(autoincrement())
  estado     String
  municipios Municipio[]
  User       User[]
}

model Municipio {
  id         Int         @id @default(autoincrement())
  estado     Estado      @relation(fields: [estadoId], references: [id])
  estadoId   Int
  municipio  String
  parroquias Parroquia[]
  User       User[]
}

model Parroquia {
  id          Int       @id @default(autoincrement())
  municipio   Municipio @relation(fields: [municipioId], references: [id])
  municipioId Int
  parroquia   String
  User        User[]
}

enum LogLevel {
  INFO
  WARN
  ERROR
}

model Log {
  id        Int      @id @default(autoincrement())
  message   String
  level     LogLevel @default(INFO)
  createdAt DateTime @default(now())
  userId    Int?
  user      User?    @relation(fields: [userId], references: [cedula], onDelete: SetNull)
}
